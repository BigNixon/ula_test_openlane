
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.30+48 (git sha1 14d50a176d5, gcc 8.3.1 -fPIC -Os)

[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `exec' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.

1. Executing Verilog-2005 frontend: /ula2_test/ula/src/ula.v
Parsing SystemVerilog input from `/ula2_test/ula/src/ula.v' to AST representation.
Generating RTLIL representation for module `\ula'.
Successfully finished Verilog frontend.

2. Generating Graphviz representation of design.
Writing dot description to `/ula2_test/ula/runs/RUN_2023.09.22_01.54.40/tmp/synthesis/hierarchy.dot'.
Dumping module ula to page 1.

3. Executing HIERARCHY pass (managing design hierarchy).

3.1. Analyzing design hierarchy..
Top module:  \ula

3.2. Analyzing design hierarchy..
Top module:  \ula
Removed 0 unused modules.

4. Executing TRIBUF pass.

5. Executing HIERARCHY pass (managing design hierarchy).

5.1. Analyzing design hierarchy..
Top module:  \ula

5.2. Analyzing design hierarchy..
Top module:  \ula
Removed 0 unused modules.

6. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

7. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed 1 dead cases from process $proc$/ula2_test/ula/src/ula.v:20$3 in module ula.
Marked 1 switch rules as full_case in process $proc$/ula2_test/ula/src/ula.v:20$3 in module ula.
Marked 1 switch rules as full_case in process $proc$/ula2_test/ula/src/ula.v:13$1 in module ula.
Removed a total of 1 dead cases.

8. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 3 assignments to connections.

9. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\ula.$proc$/ula2_test/ula/src/ula.v:9$15'.
  Set init value: \reg_result = 16'0000000000000000
Found init rule in `\ula.$proc$/ula2_test/ula/src/ula.v:8$14'.
  Set init value: \reg_data = 0

10. Executing PROC_ARST pass (detect async resets in processes).

11. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~2 debug messages>

12. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\ula.$proc$/ula2_test/ula/src/ula.v:9$15'.
Creating decoders for process `\ula.$proc$/ula2_test/ula/src/ula.v:8$14'.
Creating decoders for process `\ula.$proc$/ula2_test/ula/src/ula.v:20$3'.
     1/1: $1\reg_result[15:0]
Creating decoders for process `\ula.$proc$/ula2_test/ula/src/ula.v:13$1'.
     1/2: $0\reg_data[31:0]
     2/2: $0\result[15:0]

13. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\ula.\reg_result' from process `\ula.$proc$/ula2_test/ula/src/ula.v:20$3'.
Removing init bit 1'0 for non-memory siginal `\ula.\reg_result [0]` in process `\ula.$proc$/ula2_test/ula/src/ula.v:20$3`.
Removing init bit 1'0 for non-memory siginal `\ula.\reg_result [1]` in process `\ula.$proc$/ula2_test/ula/src/ula.v:20$3`.
Removing init bit 1'0 for non-memory siginal `\ula.\reg_result [2]` in process `\ula.$proc$/ula2_test/ula/src/ula.v:20$3`.
Removing init bit 1'0 for non-memory siginal `\ula.\reg_result [3]` in process `\ula.$proc$/ula2_test/ula/src/ula.v:20$3`.
Removing init bit 1'0 for non-memory siginal `\ula.\reg_result [4]` in process `\ula.$proc$/ula2_test/ula/src/ula.v:20$3`.
Removing init bit 1'0 for non-memory siginal `\ula.\reg_result [5]` in process `\ula.$proc$/ula2_test/ula/src/ula.v:20$3`.
Removing init bit 1'0 for non-memory siginal `\ula.\reg_result [6]` in process `\ula.$proc$/ula2_test/ula/src/ula.v:20$3`.
Removing init bit 1'0 for non-memory siginal `\ula.\reg_result [7]` in process `\ula.$proc$/ula2_test/ula/src/ula.v:20$3`.
Removing init bit 1'0 for non-memory siginal `\ula.\reg_result [8]` in process `\ula.$proc$/ula2_test/ula/src/ula.v:20$3`.
Removing init bit 1'0 for non-memory siginal `\ula.\reg_result [9]` in process `\ula.$proc$/ula2_test/ula/src/ula.v:20$3`.
Removing init bit 1'0 for non-memory siginal `\ula.\reg_result [10]` in process `\ula.$proc$/ula2_test/ula/src/ula.v:20$3`.
Removing init bit 1'0 for non-memory siginal `\ula.\reg_result [11]` in process `\ula.$proc$/ula2_test/ula/src/ula.v:20$3`.
Removing init bit 1'0 for non-memory siginal `\ula.\reg_result [12]` in process `\ula.$proc$/ula2_test/ula/src/ula.v:20$3`.
Removing init bit 1'0 for non-memory siginal `\ula.\reg_result [13]` in process `\ula.$proc$/ula2_test/ula/src/ula.v:20$3`.
Removing init bit 1'0 for non-memory siginal `\ula.\reg_result [14]` in process `\ula.$proc$/ula2_test/ula/src/ula.v:20$3`.
Removing init bit 1'0 for non-memory siginal `\ula.\reg_result [15]` in process `\ula.$proc$/ula2_test/ula/src/ula.v:20$3`.

14. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\ula.\result' using process `\ula.$proc$/ula2_test/ula/src/ula.v:13$1'.
  created $dff cell `$procdff$31' with positive edge clock.
Creating register for signal `\ula.\reg_data' using process `\ula.$proc$/ula2_test/ula/src/ula.v:13$1'.
  created $dff cell `$procdff$32' with positive edge clock.

15. Executing PROC_MEMWR pass (convert process memory writes to cells).

16. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `ula.$proc$/ula2_test/ula/src/ula.v:9$15'.
Removing empty process `ula.$proc$/ula2_test/ula/src/ula.v:8$14'.
Found and cleaned up 1 empty switch in `\ula.$proc$/ula2_test/ula/src/ula.v:20$3'.
Removing empty process `ula.$proc$/ula2_test/ula/src/ula.v:20$3'.
Found and cleaned up 1 empty switch in `\ula.$proc$/ula2_test/ula/src/ula.v:13$1'.
Removing empty process `ula.$proc$/ula2_test/ula/src/ula.v:13$1'.
Cleaned up 2 empty switches.

17. Executing CHECK pass (checking for obvious problems).
Checking module ula...
Found and reported 0 problems.

18. Executing OPT_EXPR pass (perform const folding).
Optimizing module ula.
<suppressed ~1 debug messages>

19. Executing FLATTEN pass (flatten design).

20. Executing OPT_EXPR pass (perform const folding).
Optimizing module ula.

21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ula..
Removed 0 unused cells and 10 unused wires.
<suppressed ~2 debug messages>

22. Executing OPT pass (performing simple optimizations).

22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ula.

22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ula'.
Removed a total of 0 cells.

22.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ula..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

22.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ula.
Performed a total of 0 changes.

22.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ula'.
Removed a total of 0 cells.

22.6. Executing OPT_DFF pass (perform DFF optimizations).

22.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ula..

22.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module ula.

22.9. Finished OPT passes. (There is nothing left to do.)

23. Executing FSM pass (extract and optimize FSM).

23.1. Executing FSM_DETECT pass (finding FSMs in design).

23.2. Executing FSM_EXTRACT pass (extracting FSM from design).

23.3. Executing FSM_OPT pass (simple optimizations of FSMs).

23.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ula..

23.5. Executing FSM_OPT pass (simple optimizations of FSMs).

23.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

23.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

23.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

24. Executing OPT pass (performing simple optimizations).

24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ula.

24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ula'.
Removed a total of 0 cells.

24.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ula..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

24.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ula.
Performed a total of 0 changes.

24.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ula'.
Removed a total of 0 cells.

24.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $procdff$32 ($dff) from module ula (D = { \reg_data [30:0] \data_in }, Q = \reg_data).
Adding EN signal on $procdff$31 ($dff) from module ula (D = \reg_result, Q = \result).

24.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ula..
Removed 2 unused cells and 2 unused wires.
<suppressed ~3 debug messages>

24.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module ula.

24.9. Rerunning OPT passes. (Maybe there is more to do..)

24.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ula..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

24.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ula.
Performed a total of 0 changes.

24.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ula'.
Removed a total of 0 cells.

24.13. Executing OPT_DFF pass (perform DFF optimizations).

24.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ula..

24.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module ula.

24.16. Finished OPT passes. (There is nothing left to do.)

25. Executing WREDUCE pass (reducing word size of cells).
Removed top 31 bits (of 32) from port B of cell ula.$sub$/ula2_test/ula/src/ula.v:31$7 ($sub).
Removed top 16 bits (of 32) from port Y of cell ula.$sub$/ula2_test/ula/src/ula.v:31$7 ($sub).
Removed top 16 bits (of 32) from port A of cell ula.$not$/ula2_test/ula/src/ula.v:35$10 ($not).
Removed top 31 bits (of 32) from port B of cell ula.$add$/ula2_test/ula/src/ula.v:35$12 ($add).
Removed top 16 bits (of 32) from port Y of cell ula.$add$/ula2_test/ula/src/ula.v:35$12 ($add).
Removed top 16 bits (of 32) from port A of cell ula.$add$/ula2_test/ula/src/ula.v:35$12 ($add).
Removed top 31 bits (of 32) from port B of cell ula.$add$/ula2_test/ula/src/ula.v:37$13 ($add).
Removed top 16 bits (of 32) from port Y of cell ula.$add$/ula2_test/ula/src/ula.v:37$13 ($add).
Removed top 1 bits (of 3) from port B of cell ula.$procmux$21_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell ula.$procmux$22_CMP0 ($eq).
Removed top 2 bits (of 3) from port B of cell ula.$procmux$23_CMP0 ($eq).
Removed top 16 bits (of 32) from port Y of cell ula.$add$/ula2_test/ula/src/ula.v:35$11 ($add).
Removed top 16 bits (of 32) from port B of cell ula.$add$/ula2_test/ula/src/ula.v:35$11 ($add).
Removed top 16 bits (of 32) from port Y of cell ula.$not$/ula2_test/ula/src/ula.v:35$10 ($not).
Removed top 16 bits (of 32) from wire ula.$add$/ula2_test/ula/src/ula.v:35$11_Y.
Removed top 16 bits (of 32) from wire ula.$add$/ula2_test/ula/src/ula.v:35$12_Y.
Removed top 16 bits (of 32) from wire ula.$add$/ula2_test/ula/src/ula.v:37$13_Y.
Removed top 30 bits (of 32) from wire ula.$not$/ula2_test/ula/src/ula.v:35$10_Y.
Removed top 16 bits (of 32) from wire ula.$sub$/ula2_test/ula/src/ula.v:31$7_Y.

26. Executing PEEPOPT pass (run peephole optimizers).

27. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ula..
Removed 0 unused cells and 5 unused wires.
<suppressed ~1 debug messages>

28. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module ula:
  creating $macc model for $add$/ula2_test/ula/src/ula.v:33$8 ($add).
  creating $macc model for $add$/ula2_test/ula/src/ula.v:35$11 ($add).
  creating $macc model for $add$/ula2_test/ula/src/ula.v:35$12 ($add).
  creating $macc model for $add$/ula2_test/ula/src/ula.v:37$13 ($add).
  creating $macc model for $sub$/ula2_test/ula/src/ula.v:31$7 ($sub).
  merging $macc model for $add$/ula2_test/ula/src/ula.v:35$11 into $add$/ula2_test/ula/src/ula.v:35$12.
  creating $alu model for $macc $add$/ula2_test/ula/src/ula.v:37$13.
  creating $alu model for $macc $add$/ula2_test/ula/src/ula.v:35$12.
  creating $alu model for $macc $sub$/ula2_test/ula/src/ula.v:31$7.
  creating $alu model for $macc $add$/ula2_test/ula/src/ula.v:33$8.
  creating $alu cell for $add$/ula2_test/ula/src/ula.v:33$8: $auto$alumacc.cc:485:replace_alu$40
  creating $alu cell for $sub$/ula2_test/ula/src/ula.v:31$7: $auto$alumacc.cc:485:replace_alu$43
  creating $alu cell for $add$/ula2_test/ula/src/ula.v:35$12: $auto$alumacc.cc:485:replace_alu$46
  creating $alu cell for $add$/ula2_test/ula/src/ula.v:37$13: $auto$alumacc.cc:485:replace_alu$49
  created 4 $alu and 0 $macc cells.

29. Executing SHARE pass (SAT-based resource sharing).

30. Executing OPT pass (performing simple optimizations).

30.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ula.

30.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ula'.
Removed a total of 0 cells.

30.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ula..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

30.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ula.
Performed a total of 0 changes.

30.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ula'.
Removed a total of 0 cells.

30.6. Executing OPT_DFF pass (perform DFF optimizations).

30.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ula..
Removed 1 unused cells and 1 unused wires.
<suppressed ~2 debug messages>

30.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module ula.

30.9. Rerunning OPT passes. (Maybe there is more to do..)

30.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ula..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

30.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ula.
Performed a total of 0 changes.

30.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ula'.
Removed a total of 0 cells.

30.13. Executing OPT_DFF pass (perform DFF optimizations).

30.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ula..

30.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module ula.

30.16. Finished OPT passes. (There is nothing left to do.)

31. Executing MEMORY pass.

31.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

31.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

31.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

31.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

31.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

31.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ula..

31.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

31.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

31.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ula..

31.10. Executing MEMORY_COLLECT pass (generating $mem cells).

32. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ula..

33. Executing OPT pass (performing simple optimizations).

33.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ula.
<suppressed ~1 debug messages>

33.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ula'.
Removed a total of 0 cells.

33.3. Executing OPT_DFF pass (perform DFF optimizations).

33.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ula..
Removed 1 unused cells and 1 unused wires.
<suppressed ~2 debug messages>

33.5. Finished fast OPT passes.

34. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

35. Executing OPT pass (performing simple optimizations).

35.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ula.

35.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ula'.
Removed a total of 0 cells.

35.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ula..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

35.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ula.
Performed a total of 0 changes.

35.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ula'.
Removed a total of 0 cells.

35.6. Executing OPT_SHARE pass.
    Found cells that share an operand and can be merged by moving the $pmux $procmux$16 in front of them:
        $auto$alumacc.cc:485:replace_alu$49
        $auto$alumacc.cc:485:replace_alu$40
        $auto$alumacc.cc:485:replace_alu$43

35.7. Executing OPT_DFF pass (perform DFF optimizations).

35.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ula..
Removed 0 unused cells and 9 unused wires.
<suppressed ~1 debug messages>

35.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module ula.
<suppressed ~2 debug messages>

35.10. Rerunning OPT passes. (Maybe there is more to do..)

35.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ula..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

35.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ula.
    New ctrl vector for $pmux cell $procmux$16: { $procmux$23_CMP $procmux$22_CMP $procmux$21_CMP $procmux$18_CMP $auto$opt_reduce.cc:134:opt_pmux$60 }
  Optimizing cells in module \ula.
Performed a total of 1 changes.

35.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ula'.
Removed a total of 0 cells.

35.14. Executing OPT_SHARE pass.

35.15. Executing OPT_DFF pass (perform DFF optimizations).

35.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ula..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

35.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module ula.

35.18. Rerunning OPT passes. (Maybe there is more to do..)

35.19. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ula..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

35.20. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ula.
Performed a total of 0 changes.

35.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ula'.
Removed a total of 0 cells.

35.22. Executing OPT_SHARE pass.

35.23. Executing OPT_DFF pass (perform DFF optimizations).

35.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ula..

35.25. Executing OPT_EXPR pass (perform const folding).
Optimizing module ula.

35.26. Finished OPT passes. (There is nothing left to do.)

36. Executing TECHMAP pass (map to technology primitives).

36.1. Executing Verilog-2005 frontend: /build/bin/../share/yosys/techmap.v
Parsing Verilog input from `/build/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

36.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $eqx.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $or.
Using template $paramod$6df0329addda9228fcc2546de2aaf14ad26c98e1\_90_alu for cells of type $alu.
Using template $paramod$0d149ffe75563ef6fcc1a3dddc59d00af28651a7\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $eq.
Using template $paramod$ede7b58042915c15b5512c92c18754c007fd5a95\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $dffe.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000010000 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $mux.
No more expansions possible.
<suppressed ~447 debug messages>

37. Executing OPT pass (performing simple optimizations).

37.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ula.
<suppressed ~189 debug messages>

37.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ula'.
<suppressed ~135 debug messages>
Removed a total of 45 cells.

37.3. Executing OPT_DFF pass (perform DFF optimizations).

37.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ula..
Removed 25 unused cells and 224 unused wires.
<suppressed ~26 debug messages>

37.5. Finished fast OPT passes.

38. Executing ABC pass (technology mapping using ABC).

38.1. Extracting gate netlist of module `\ula' to `<abc-temp-dir>/input.blif'..
Extracted 482 gates and 518 wires to a netlist network with 35 inputs and 16 outputs.

38.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

38.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        1
ABC RESULTS:               NOT cells:       39
ABC RESULTS:              NAND cells:       17
ABC RESULTS:               NOR cells:       37
ABC RESULTS:             ORNOT cells:       31
ABC RESULTS:               XOR cells:       46
ABC RESULTS:            ANDNOT cells:      158
ABC RESULTS:                OR cells:      102
ABC RESULTS:               MUX cells:       31
ABC RESULTS:        internal signals:      467
ABC RESULTS:           input signals:       35
ABC RESULTS:          output signals:       16
Removing temp directory.

39. Executing OPT pass (performing simple optimizations).

39.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ula.

39.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ula'.
Removed a total of 0 cells.

39.3. Executing OPT_DFF pass (perform DFF optimizations).

39.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ula..
Removed 0 unused cells and 196 unused wires.
<suppressed ~1 debug messages>

39.5. Finished fast OPT passes.

40. Executing HIERARCHY pass (managing design hierarchy).

40.1. Analyzing design hierarchy..
Top module:  \ula

40.2. Analyzing design hierarchy..
Top module:  \ula
Removed 0 unused modules.

41. Printing statistics.

=== ula ===

   Number of wires:                453
   Number of wire bits:            516
   Number of public wires:           7
   Number of public wire bits:      70
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                510
     $_ANDNOT_                     158
     $_AND_                          1
     $_DFFE_PN_                     16
     $_DFFE_PP_                     32
     $_MUX_                         31
     $_NAND_                        17
     $_NOR_                         37
     $_NOT_                         39
     $_ORNOT_                       31
     $_OR_                         102
     $_XOR_                         46

42. Executing CHECK pass (checking for obvious problems).
Checking module ula...
Found and reported 0 problems.

43. Generating Graphviz representation of design.
Writing dot description to `/ula2_test/ula/runs/RUN_2023.09.22_01.54.40/tmp/synthesis/post_techmap.dot'.
Dumping module ula to page 1.

44. Executing SHARE pass (SAT-based resource sharing).

45. Executing OPT pass (performing simple optimizations).

45.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ula.

45.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ula'.
Removed a total of 0 cells.

45.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ula..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

45.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ula.
Performed a total of 0 changes.

45.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ula'.
Removed a total of 0 cells.

45.6. Executing OPT_DFF pass (perform DFF optimizations).

45.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ula..

45.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module ula.

45.9. Finished OPT passes. (There is nothing left to do.)

46. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ula..

47. Printing statistics.

=== ula ===

   Number of wires:                453
   Number of wire bits:            516
   Number of public wires:           7
   Number of public wire bits:      70
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                510
     $_ANDNOT_                     158
     $_AND_                          1
     $_DFFE_PN_                     16
     $_DFFE_PP_                     32
     $_MUX_                         31
     $_NAND_                        17
     $_NOR_                         37
     $_NOT_                         39
     $_ORNOT_                       31
     $_OR_                         102
     $_XOR_                         46

mapping tbuf

48. Executing TECHMAP pass (map to technology primitives).

48.1. Executing Verilog-2005 frontend: /home/bignixon/unic-cass/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v
Parsing Verilog input from `/home/bignixon/unic-cass/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v' to AST representation.
Generating RTLIL representation for module `\$_TBUF_'.
Successfully finished Verilog frontend.

48.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

49. Executing SIMPLEMAP pass (map simple cells to gate primitives).

50. Executing TECHMAP pass (map to technology primitives).

50.1. Executing Verilog-2005 frontend: /home/bignixon/unic-cass/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v
Parsing Verilog input from `/home/bignixon/unic-cass/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Successfully finished Verilog frontend.

50.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

51. Executing SIMPLEMAP pass (map simple cells to gate primitives).

52. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell sky130_fd_sc_hd__dfxtp_2 (noninv, pins=3, area=21.27) is a direct match for cell type $_DFF_P_.
  cell sky130_fd_sc_hd__dfrtp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN0_.
  cell sky130_fd_sc_hd__dfstp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN1_.
  cell sky130_fd_sc_hd__dfbbn_2 (noninv, pins=6, area=35.03) is a direct match for cell type $_DFFSR_NNN_.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \sky130_fd_sc_hd__dfxtp_2 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    \sky130_fd_sc_hd__dfrtp_2 _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .RESET_B( R));
    \sky130_fd_sc_hd__dfstp_2 _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .SET_B( R));
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    \sky130_fd_sc_hd__dfbbn_2 _DFFSR_NNN_ (.CLK_N( C), .D( D), .Q( Q), .Q_N(~Q), .RESET_B( R), .SET_B( S));
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    unmapped dff cell: $_DFFSR_PNN_
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

52.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\ula':
  mapped 48 $_DFF_P_ cells to \sky130_fd_sc_hd__dfxtp_2 cells.

53. Printing statistics.

=== ula ===

   Number of wires:                501
   Number of wire bits:            564
   Number of public wires:           7
   Number of public wire bits:      70
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                558
     $_ANDNOT_                     158
     $_AND_                          1
     $_MUX_                         79
     $_NAND_                        17
     $_NOR_                         37
     $_NOT_                         39
     $_ORNOT_                       31
     $_OR_                         102
     $_XOR_                         46
     sky130_fd_sc_hd__dfxtp_2       48

[INFO]: USING STRATEGY AREA 3

54. Executing ABC pass (technology mapping using ABC).

54.1. Extracting gate netlist of module `\ula' to `/tmp/yosys-abc-ntPVue/input.blif'..
Extracted 510 gates and 563 wires to a netlist network with 53 inputs and 48 outputs.

54.1.1. Executing ABC.
Running ABC command: "/build/bin/yosys-abc" -s -f /tmp/yosys-abc-ntPVue/abc.script 2>&1
ABC: ABC command line: "source /tmp/yosys-abc-ntPVue/abc.script".
ABC: 
ABC: + read_blif /tmp/yosys-abc-ntPVue/input.blif 
ABC: + read_lib -w /ula2_test/ula/runs/RUN_2023.09.22_01.54.40/tmp/synthesis/trimmed.lib 
ABC: Parsing finished successfully.  Parsing time =     0.06 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfbbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfsbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtp_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_8".
ABC: Library "sky130A_merged" from "/ula2_test/ula/runs/RUN_2023.09.22_01.54.40/tmp/synthesis/trimmed.lib" has 175 cells (17 skipped: 14 seq; 3 tri-state; 0 no func; 0 dont_use).  Time =     0.10 sec
ABC: Memory =    9.54 MB. Time =     0.10 sec
ABC: Warning: Detected 2 multi-output gates (for example, "sky130_fd_sc_hd__fa_1").
ABC: + read_constr -v /ula2_test/ula/runs/RUN_2023.09.22_01.54.40/tmp/synthesis/synthesis.sdc 
ABC: Setting driving cell to be "sky130_fd_sc_hd__inv_2".
ABC: Setting output load to be 33.442001.
ABC: + read_constr /ula2_test/ula/runs/RUN_2023.09.22_01.54.40/tmp/synthesis/synthesis.sdc 
ABC: + strash 
ABC: + dch 
ABC: + map -B 0.9 
ABC: The cell delays are multiplied by the factor: <num_fanins> ^ (0.90).
ABC: + topo 
ABC: + stime -c 
ABC: WireLoad = "Small"  Gates =    468 ( 13.5 %)   Cap = 11.4 ff (  1.7 %)   Area =     3482.09 ( 86.5 %)   Delay =  2220.99 ps  ( 20.5 %)               
ABC: + buffer -c -N 10 
ABC: + upsize -c 
ABC: + dnsize -c 
ABC: + stime -p 
ABC: WireLoad = "none"  Gates =    517 ( 21.7 %)   Cap = 10.4 ff (  6.0 %)   Area =     3819.91 ( 74.5 %)   Delay =  1797.75 ps  ( 24.6 %)               
ABC: Path  0 --       3 : 0    8 pi                         A =   0.00  Df = 157.0  -84.8 ps  S = 230.0 ps  Cin =  0.0 ff  Cout =  49.5 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --     179 : 3   10 sky130_fd_sc_hd__nand3_4   A =  17.52  Df = 348.3  -97.6 ps  S = 174.7 ps  Cin =  8.7 ff  Cout =  46.7 ff  Cmax = 469.7 ff  G =  514  
ABC: Path  2 --     180 : 1   10 sky130_fd_sc_hd__buf_6     A =  11.26  Df = 546.7 -117.8 ps  S = 100.8 ps  Cin =  4.6 ff  Cout =  45.5 ff  Cmax = 785.5 ff  G =  951  
ABC: Path  3 --     245 : 2    1 sky130_fd_sc_hd__nand2_2   A =   6.26  Df = 612.4 -122.7 ps  S =  44.7 ps  Cin =  4.4 ff  Cout =   4.6 ff  Cmax = 295.7 ff  G =  100  
ABC: Path  4 --     247 : 2    2 sky130_fd_sc_hd__nand2_2   A =   6.26  Df = 667.1 -110.1 ps  S =  69.2 ps  Cin =  4.4 ff  Cout =   9.6 ff  Cmax = 295.7 ff  G =  208  
ABC: Path  5 --     294 : 3    1 sky130_fd_sc_hd__a21boi_2  A =  11.26  Df = 840.7 -154.8 ps  S = 148.0 ps  Cin =  3.6 ff  Cout =   9.3 ff  Cmax = 129.1 ff  G =  245  
ABC: Path  6 --     295 : 2    4 sky130_fd_sc_hd__nand2_4   A =  11.26  Df = 937.7   -9.6 ps  S =  80.4 ps  Cin =  8.7 ff  Cout =  20.5 ff  Cmax = 530.1 ff  G =  227  
ABC: Path  7 --     391 : 2    2 sky130_fd_sc_hd__nand2_4   A =  11.26  Df =1035.6  -38.5 ps  S =  55.3 ps  Cin =  8.7 ff  Cout =  11.3 ff  Cmax = 530.1 ff  G =  125  
ABC: Path  8 --     399 : 2    3 sky130_fd_sc_hd__nand2_4   A =  11.26  Df =1110.2  -54.1 ps  S =  74.0 ps  Cin =  8.7 ff  Cout =  17.8 ff  Cmax = 530.1 ff  G =  199  
ABC: Path  9 --     465 : 2    1 sky130_fd_sc_hd__nand2_2   A =   6.26  Df =1159.3  -42.9 ps  S =  44.7 ps  Cin =  4.4 ff  Cout =   4.6 ff  Cmax = 295.7 ff  G =  100  
ABC: Path 10 --     468 : 2    2 sky130_fd_sc_hd__nand2_2   A =   6.26  Df =1218.1  -53.7 ps  S =  57.1 ps  Cin =  4.4 ff  Cout =   7.1 ff  Cmax = 295.7 ff  G =  153  
ABC: Path 11 --     469 : 2    1 sky130_fd_sc_hd__or2_4     A =   8.76  Df =1384.0  -60.2 ps  S =  46.4 ps  Cin =  2.4 ff  Cout =   4.4 ff  Cmax = 514.5 ff  G =  181  
ABC: Path 12 --     471 : 3    1 sky130_fd_sc_hd__nand3_2   A =  10.01  Df =1440.2  -66.7 ps  S =  68.9 ps  Cin =  4.4 ff  Cout =   4.4 ff  Cmax = 260.0 ff  G =   96  
ABC: Path 13 --     472 : 5    1 sky130_fd_sc_hd__o2111ai_2 A =  15.01  Df =1518.0  -80.9 ps  S = 139.4 ps  Cin =  4.3 ff  Cout =   2.6 ff  Cmax = 129.1 ff  G =   55  
ABC: Path 14 --     474 : 3    1 sky130_fd_sc_hd__o21a_2    A =   8.76  Df =1797.8 -116.5 ps  S = 183.7 ps  Cin =  2.4 ff  Cout =  33.4 ff  Cmax = 294.8 ff  G = 1403  
ABC: Start-point = pi2 (\op [1]).  End-point = po42 ($auto$rtlil.cc:2607:MuxGate$1647).
ABC: + print_stats -m 
ABC: netlist                       : i/o =   53/   48  lat =    0  nd =   517  edge =   1160  area =3820.39  delay =993.08  lev = 22
ABC: + write_blif /tmp/yosys-abc-ntPVue/output.blif 

54.1.2. Re-integrating ABC results.
ABC RESULTS:   sky130_fd_sc_hd__inv_4 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nor2_8 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a211o_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__bufinv_8 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nand3_4 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__buf_6 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__a22o_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__nand2b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a21boi_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__and3_4 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a2111o_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__buf_1 cells:       41
ABC RESULTS:   sky130_fd_sc_hd__o221ai_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__a31oi_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__mux2_2 cells:       36
ABC RESULTS:   sky130_fd_sc_hd__buf_2 cells:        6
ABC RESULTS:   sky130_fd_sc_hd__a2bb2o_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a211oi_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o2bb2a_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__o211a_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__o211ai_2 cells:        5
ABC RESULTS:   sky130_fd_sc_hd__a31o_2 cells:        6
ABC RESULTS:   sky130_fd_sc_hd__o41a_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__or3_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__and3_2 cells:        8
ABC RESULTS:   sky130_fd_sc_hd__o221a_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__nor2_4 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__and2_4 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o2111ai_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__o21a_4 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a21o_2 cells:        6
ABC RESULTS:   sky130_fd_sc_hd__o21ba_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__o22a_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__o21a_2 cells:        5
ABC RESULTS:   sky130_fd_sc_hd__or2_4 cells:        9
ABC RESULTS:   sky130_fd_sc_hd__nand3b_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o21ai_2 cells:       25
ABC RESULTS:   sky130_fd_sc_hd__xor2_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__inv_2 cells:       61
ABC RESULTS:   sky130_fd_sc_hd__or2_2 cells:       18
ABC RESULTS:   sky130_fd_sc_hd__a221o_2 cells:        6
ABC RESULTS:   sky130_fd_sc_hd__and2_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__a21oi_2 cells:       14
ABC RESULTS:   sky130_fd_sc_hd__nor2_2 cells:       31
ABC RESULTS:   sky130_fd_sc_hd__nand3_2 cells:       30
ABC RESULTS:   sky130_fd_sc_hd__nand2_2 cells:      150
ABC RESULTS:   sky130_fd_sc_hd__nand2_4 cells:       11
ABC RESULTS:        internal signals:      462
ABC RESULTS:           input signals:       53
ABC RESULTS:          output signals:       48
Removing temp directory.

55. Executing SETUNDEF pass (replace undef values with defined constants).

56. Executing HILOMAP pass (mapping to constant drivers).

57. Executing SPLITNETS pass (splitting up multi-bit signals).

58. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ula..
Removed 0 unused cells and 563 unused wires.
<suppressed ~17 debug messages>

59. Executing INSBUF pass (insert buffer cells for connected wires).

60. Executing CHECK pass (checking for obvious problems).
Checking module ula...
Warning: Wire ula.\result [15] is used but has no driver.
Warning: Wire ula.\result [14] is used but has no driver.
Warning: Wire ula.\result [13] is used but has no driver.
Warning: Wire ula.\result [12] is used but has no driver.
Warning: Wire ula.\result [11] is used but has no driver.
Warning: Wire ula.\result [10] is used but has no driver.
Warning: Wire ula.\result [9] is used but has no driver.
Warning: Wire ula.\result [8] is used but has no driver.
Warning: Wire ula.\result [7] is used but has no driver.
Warning: Wire ula.\result [6] is used but has no driver.
Warning: Wire ula.\result [5] is used but has no driver.
Warning: Wire ula.\result [4] is used but has no driver.
Warning: Wire ula.\result [3] is used but has no driver.
Warning: Wire ula.\result [2] is used but has no driver.
Warning: Wire ula.\result [1] is used but has no driver.
Warning: Wire ula.\result [0] is used but has no driver.
Found and reported 16 problems.

61. Printing statistics.

=== ula ===

   Number of wires:                554
   Number of wire bits:            571
   Number of public wires:          37
   Number of public wire bits:      54
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                565
     sky130_fd_sc_hd__a2111o_2       2
     sky130_fd_sc_hd__a211o_2        1
     sky130_fd_sc_hd__a211oi_2       1
     sky130_fd_sc_hd__a21boi_2       1
     sky130_fd_sc_hd__a21o_2         6
     sky130_fd_sc_hd__a21oi_2       14
     sky130_fd_sc_hd__a221o_2        6
     sky130_fd_sc_hd__a22o_2         1
     sky130_fd_sc_hd__a2bb2o_2       1
     sky130_fd_sc_hd__a31o_2         6
     sky130_fd_sc_hd__a31oi_2        1
     sky130_fd_sc_hd__and2_2         4
     sky130_fd_sc_hd__and2_4         1
     sky130_fd_sc_hd__and3_2         8
     sky130_fd_sc_hd__and3_4         1
     sky130_fd_sc_hd__buf_1         41
     sky130_fd_sc_hd__buf_2          6
     sky130_fd_sc_hd__buf_6          2
     sky130_fd_sc_hd__bufinv_8       1
     sky130_fd_sc_hd__dfxtp_2       48
     sky130_fd_sc_hd__inv_2         61
     sky130_fd_sc_hd__inv_4          1
     sky130_fd_sc_hd__mux2_2        36
     sky130_fd_sc_hd__nand2_2      150
     sky130_fd_sc_hd__nand2_4       11
     sky130_fd_sc_hd__nand2b_2       1
     sky130_fd_sc_hd__nand3_2       30
     sky130_fd_sc_hd__nand3_4        1
     sky130_fd_sc_hd__nand3b_2       1
     sky130_fd_sc_hd__nor2_2        31
     sky130_fd_sc_hd__nor2_4         1
     sky130_fd_sc_hd__nor2_8         1
     sky130_fd_sc_hd__o2111ai_2      3
     sky130_fd_sc_hd__o211a_2        2
     sky130_fd_sc_hd__o211ai_2       5
     sky130_fd_sc_hd__o21a_2         5
     sky130_fd_sc_hd__o21a_4         1
     sky130_fd_sc_hd__o21ai_2       25
     sky130_fd_sc_hd__o21ba_2        2
     sky130_fd_sc_hd__o221a_2        4
     sky130_fd_sc_hd__o221ai_2       3
     sky130_fd_sc_hd__o22a_2         2
     sky130_fd_sc_hd__o2bb2a_2       4
     sky130_fd_sc_hd__o41a_2         1
     sky130_fd_sc_hd__or2_2         18
     sky130_fd_sc_hd__or2_4          9
     sky130_fd_sc_hd__or3_2          2
     sky130_fd_sc_hd__xor2_2         2

   Chip area for module '\ula': 4840.892800

62. Executing Verilog backend.
Dumping module `\ula'.

Warnings: 16 unique messages, 16 total
End of script. Logfile hash: b44fc8f4cf, CPU: user 0.88s system 0.02s, MEM: 29.83 MB peak
Yosys 0.30+48 (git sha1 14d50a176d5, gcc 8.3.1 -fPIC -Os)
Time spent: 37% 2x abc (0 sec), 15% 4x stat (0 sec), ...
